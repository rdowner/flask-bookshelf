AWSTemplateFormatVersion: '2010-09-09'
Description: Python Flask Demo with AWS Secrets Manager - Basic, Common Infrastructure

Parameters:
  VPCCIDR:
    Description: CIDR for the application's VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    ConstraintDescription: A CIDR, such as 192.168.0.0/16
  SubnetACIDR:
    Description: CIDR for the application's first subnet
    Type: String
    Default: 10.0.4.0/24
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    ConstraintDescription: A CIDR, such as 192.168.16.0/24
  SubnetBCIDR:
    Description: CIDR for the application's second subnet
    Type: String
    Default: 10.0.8.0/24
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    ConstraintDescription: A CIDR, such as 192.168.32.0/24
  DatabaseTierInstanceType:
    Description: Instance type to be used for database tier RDS instances
    Type: String
    Default: db.t2.micro
  DatabaseMasterUsername:
    Description: Login name of the "master" user of the database
    Type: String
    Default: master
  DatabaseMasterPassword:
    Description: Password of the "master" user of the database
    Type: String
    Default: fooBar42
  ManagementCIDR:
    Description: CIDR from which SSH clients can be made to web tier EC2 instances, and database clients can connect to the database
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    ConstraintDescription: A CIDR, such as 0.0.0.0/0

Outputs:
  VPCID:
    Description: The VPC ID
    Value: !Ref BookshelfVPC
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", BookshelfVPC ] ]
  SubnetAID:
    Description: The ID of the first subnet
    Value: !Ref BookshelfSubnetA
    Export:
     Name: !Join [ ":", [ !Ref "AWS::StackName", BookshelfSubnetA ] ]
  SubnetBID:
    Description: The ID of the second subnet
    Value: !Ref BookshelfSubnetB
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", BookshelfSubnetB ] ]
  DatabaseTierAccessSecurityGroup:
    Description: The ID of the security group that should be used by EC2 instances wanting to access the database
    Value: !Ref DatabaseTierAccessSecurityGroup
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", DatabaseTierAccessSecurityGroup ] ]
  WebTierSecurityGroup:
    Description: The ID of the security group that permits web access
    Value: !Ref WebTierSecurityGroup
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", WebTierSecurityGroup ] ]
  ManagementSecurityGroup:
    Description: The ID of the security group that permits SSH access
    Value: !Ref ManagementSecurityGroup
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ManagementSecurityGroup ] ]
  BookshelfWebTierInstanceProfile:
    Description: The ARN of the instance profile that is applied to EC2 web tier instances
    Value: !GetAtt [ BookshelfWebTierInstanceProfile, Arn ]
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", BookshelfWebTierInstanceProfile ] ]
  ServiceRoleForCodeDeploy:
    Description: The ARN of the role that is required for CodeDeploy deployments
    Value: !GetAtt [ ServiceRoleForCodeDeploy, Arn ]
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ServiceRoleForCodeDeploy ] ]

Resources:

  BookshelfVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - { Key: Name, Value: BookshelfVPC }

  BookshelfSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BookshelfVPC
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', 'a' ] ]
      CidrBlock: !Ref SubnetACIDR
      MapPublicIpOnLaunch: false
      Tags:
        - { Key: Name, Value: BookshelfSubnetA }

  BookshelfSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BookshelfVPC
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', 'b' ] ]
      CidrBlock: !Ref SubnetBCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - { Key: Name, Value: BookshelfSubnetB }

  BookshelfInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - { Key: Name, Value: BookshelfInternetGateway }

  BookshelfInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref BookshelfVPC
      InternetGatewayId: !Ref BookshelfInternetGateway

  BookshelfRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BookshelfVPC
      Tags:
        - { Key: Name, Value: BookshelfRouteTable }

  BookshelfRouteInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: BookshelfInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref BookshelfRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref BookshelfInternetGateway

  BookshelfSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref BookshelfRouteTable
      SubnetId: !Ref BookshelfSubnetA

  BookshelfSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref BookshelfRouteTable
      SubnetId: !Ref BookshelfSubnetB

  WebTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security rules for the web tier
      VpcId: !Ref BookshelfVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  ManagementSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security rules for the web tier
      VpcId: !Ref BookshelfVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref ManagementCIDR
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: !Ref ManagementCIDR

  DatabaseTierAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security rules for the web tier
      VpcId: !Ref BookshelfVPC
      SecurityGroupIngress: []

  DatabaseTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security rules for the database tier
      VpcId: !Ref BookshelfVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref DatabaseTierAccessSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: bookshelf database
      SubnetIds: [ !Ref BookshelfSubnetA, !Ref BookshelfSubnetB ]

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', 'a' ] ]
      DBInstanceClass: !Ref DatabaseTierInstanceType
      Engine: mysql
      EngineVersion: 5.7.21
      AllowMajorVersionUpgrade: true
      MasterUsername: !Ref DatabaseMasterUsername
      MasterUserPassword: !Ref DatabaseMasterPassword
      StorageType: gp2
      AllocatedStorage: 20

      VPCSecurityGroups:
        - !Ref DatabaseTierSecurityGroup
        - !Ref ManagementSecurityGroup
      PubliclyAccessible: true
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBName: bookshelf

  BookshelfWebTierInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BookshelfWebTierRole

  BookshelfWebTierRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  ServiceRoleForCodeDeploy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: codedeploy.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
